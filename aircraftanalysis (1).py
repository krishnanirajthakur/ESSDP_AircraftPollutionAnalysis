# -*- coding: utf-8 -*-
"""AircraftAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K4mDGxODfPF24ENHoVwjB5rpTugeExSE
"""

#Aircraft Analysis
#Krishna Niraj Thakur

#Step 1- Data Loading
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("sample_aircraft_data.csv")

df.head(1200)

df.info()

df.describe()

df.isnull().sum()

#It was detected the country of origin of this aircrafts and their Manufacturing country is same so Manufacturing Country data can be dropped.
df.drop("Manufacturing_Country",axis=1,inplace=True)

# Step 2: Preprocess Data
# Encode categorical column "Country_of_Origin"
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
df['Country_of_Origin'] = label_encoder.fit_transform(df['Country_of_Origin'])

# Encode 'Engine_Type' column
df['Engine_Type'] = label_encoder.fit_transform(df['Engine_Type'])

x = df.drop(columns=["Pollution_CO2_g_per_pax_km", 'Model', 'Manufacturer'])
y = df.iloc[:,2]

x

y

# Step 4: Split data into training and testing sets (80% train, 20% test)
from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=42)

# Step 5: standardize the data to improve model performance
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

xtrain = scaler.fit_transform(xtrain)
xtest = scaler.transform(xtest)

# Step 18: Train the Support Vector Regression model
from sklearn.svm import SVR
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

svr_model = SVR(kernel='rbf')  # You can experiment with different kernels like 'linear', 'poly', 'sigmoid'
svr_model.fit(xtrain, ytrain)

# Step 19: Make predictions with the SVR model
svr_ypred = svr_model.predict(xtest)

# Step 20: Evaluate the SVR model
svr_mae = mean_absolute_error(ytest, svr_ypred)
svr_mse = mean_squared_error(ytest, svr_ypred)
svr_r2 = r2_score(ytest, svr_ypred)

# Print results for SVR
print("SVR Mean Absolute Error:", svr_mae)
print("SVR Mean Squared Error:", svr_mse)
print("SVR R-squared Score:", svr_r2)

# Step 28: Create pollution categories
df['Pollution_Category'] = pd.qcut(df['Pollution_CO2_g_per_pax_km'], q=3, labels=['Low', 'Medium', 'High'])

# Step 29: Separate features (X) and the new target variable (y) for classification
X_cls = df.drop(columns=['Pollution_CO2_g_per_pax_km', 'Pollution_Category', 'Model', 'Manufacturer'])
y_cls = df['Pollution_Category']

# Step 30: Split data into training and testing sets for classification (80% train, 20% test)
from sklearn.model_selection import train_test_split
X_train_cls, X_test_cls, y_train_cls, y_test_cls = train_test_split(X_cls, y_cls, test_size=0.2, random_state=42, stratify=y_cls)

# Step 31: Standardize the classification features
# It's good practice to standardize features for Logistic Regression
from sklearn.preprocessing import StandardScaler

scaler_cls = StandardScaler()
X_train_cls_scaled = scaler_cls.fit_transform(X_train_cls)
X_test_cls_scaled = scaler_cls.transform(X_test_cls)

# Step 32: Train the Logistic Regression model
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

logreg_model = LogisticRegression(random_state=42, multi_class='auto')
logreg_model.fit(X_train_cls_scaled, y_train_cls)

# Step 33: Make predictions with the Logistic Regression model
y_pred_cls = logreg_model.predict(X_test_cls_scaled)

# Step 34: Evaluate the Logistic Regression model
accuracy_logreg = accuracy_score(y_test_cls, y_pred_cls)
class_report_logreg = classification_report(y_test_cls, y_pred_cls)
conf_matrix_logreg = confusion_matrix(y_test_cls, y_pred_cls)

print("Logistic Regression Accuracy:", accuracy_logreg)
print("\nLogistic Regression Classification Report:\n", class_report_logreg)
print("\nLogistic Regression Confusion Matrix:\n", conf_matrix_logreg)

# Step 35: Train the Random Forest Classification model
from sklearn.ensemble import RandomForestClassifier

rf_cls_model = RandomForestClassifier(random_state=42)
rf_cls_model.fit(X_train_cls_scaled, y_train_cls)

# Step 36: Make predictions with the Random Forest model
y_pred_rf_cls = rf_cls_model.predict(X_test_cls_scaled)

# Step 37: Evaluate the Random Forest model
accuracy_rf_cls = accuracy_score(y_test_cls, y_pred_rf_cls)
class_report_rf_cls = classification_report(y_test_cls, y_pred_rf_cls)
conf_matrix_rf_cls = confusion_matrix(y_test_cls, y_pred_rf_cls)

print("Random Forest Classification Accuracy:", accuracy_rf_cls)
print("\nRandom Forest Classification Classification Report:\n", class_report_rf_cls)
print("\nRandom Forest Classification Confusion Matrix:\n", conf_matrix_rf_cls)

# Step 38: Train the Gradient Boosting Classification model
from sklearn.ensemble import GradientBoostingClassifier

gb_cls_model = GradientBoostingClassifier(random_state=42)
gb_cls_model.fit(X_train_cls_scaled, y_train_cls)

# Step 39: Make predictions with the Gradient Boosting model
y_pred_gb_cls = gb_cls_model.predict(X_test_cls_scaled)

# Step 40: Evaluate the Gradient Boosting model
accuracy_gb_cls = accuracy_score(y_test_cls, y_pred_gb_cls)
class_report_gb_cls = classification_report(y_test_cls, y_pred_gb_cls)
conf_matrix_gb_cls = confusion_matrix(y_test_cls, y_pred_gb_cls)

print("Gradient Boosting Classification Accuracy:", accuracy_gb_cls)
print("\nGradient Boosting Classification Report:\n", class_report_gb_cls)
print("\nGradient Boosting Classification Confusion Matrix:\n", conf_matrix_gb_cls)

# Summarize SVR Regression Model Results
print("SVR Regression Model Evaluation:")
print(f"Mean Absolute Error: {svr_mae:.2f}")
print(f"Mean Squared Error: {svr_mse:.2f}")
print(f"R-squared Score: {svr_r2:.4f}")
print("-" * 30)

# Summarize Classification Model Results
print("Classification Model Evaluation:")
print("Logistic Regression:")
print(f"Accuracy: {accuracy_logreg:.4f}")
print("Classification Report:\n", class_report_logreg)
print("-" * 30)

# Comparison and Discussion
print("Model Performance Comparison:")
print("Regression Models:")
print(f"SVR R-squared: {svr_r2:.4f}")
print("The SVR model shows a very low R-squared score, indicating it explains very little variance in pollution levels.")

print("\nClassification Models:")
print(f"Logistic Regression Accuracy: {accuracy_logreg:.4f}")
print("Among the classification models, Logistic Regression achieved the highest accuracy.")